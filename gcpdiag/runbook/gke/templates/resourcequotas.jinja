{% block higher_version_quota_exceeded_step_name %}
Verify Kubernetes resource quotas are within limits for cluster:
project/{project_id}/locations/{cluster_location}/clusters/{cluster_name} between {start_time} and {end_time}.
{% endblock higher_version_quota_exceeded_step_name %}

{% block higher_version_quota_exceeded_failure_reason %}
The cluster projects/{project}/locations/{location}/clusters/{cluster} has exceeded its Kubernetes resource quota between
{start_time} and {end_time}.
Example log entry that would help identify involved objects:

{log_entry}
{% endblock higher_version_quota_exceeded_failure_reason %}

{% block higher_version_quota_exceeded_failure_remediation %}
GKE doesn't enforce the Kubernetes resource quotas for clusters running version 1.28 or later, however GKE doesn't
restrict applying custom Kubernetes resource quotas.
More details: <https://cloud.google.com/kubernetes-engine/quotas#resource_quotas>
To list resource quotas in the cluster, use the following command:

`kubectl get resourcequota --all-namespaces`

Refer to the Kubernetes documentation for more information about resource quotas: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>
{% endblock higher_version_quota_exceeded_failure_remediation %}

{% block higher_version_quota_exceeded_success_reason %}
The cluster projects/{project}/locations/{location}/clusters/{cluster} was within its Kubernetes resource quota between
{start_time} and {end_time}.
{% endblock higher_version_quota_exceeded_success_reason %}

{% block lower_version_quota_exceeded_step_name %}
Verify Kubernetes resource quotas are within limits for cluster:
project/{project_id}/locations/{cluster_location}/clusters/{cluster_name} between {start_time} and {end_time}
{% endblock lower_version_quota_exceeded_step_name %}

{% block lower_version_quota_exceeded_failure_reason %}
The cluster projects/{project}/locations/{location}/clusters/{cluster} has exceeded its Kubernetes resource quota between
{start_time} and {end_time}.
Example log entry that would help identify involved objects:

{log_entry}
{% endblock lower_version_quota_exceeded_failure_reason %}

{% block lower_version_quota_exceeded_failure_remediation %}
For clusters with under 100 nodes, GKE applies a Kubernetes resource quota to every namespace. These quotas protect the
cluster's control plane from instability caused by potential bugs in applications deployed to the cluster. These quotas cannot
be removed because they are enforced by GKE.
See details: <https://cloud.google.com/kubernetes-engine/quotas#resource_quotas>
To list resource quotas in the cluster, use the following command:

`kubectl get resourcequota --all-namespaces`

Refer to the Kubernetes documentation for more information about resource quotas: <https://kubernetes.io/docs/concepts/policy/resource-quotas/>

For the GKE resource quotas named "gke-resource-quotas", open a
GCP support case to request either an increase to a specific quota limit or the disabling of GKE resource quotas for the
cluster.
{% endblock lower_version_quota_exceeded_failure_remediation %}

{% block lower_version_quota_exceeded_success_reason %}
The cluster projects/{project}/locations/{location}/clusters/{cluster} was within its Kubernetes resource quota between
{start_time} and {end_time}.
{% endblock lower_version_quota_exceeded_success_reason %}
