#!/bin/bash
set -e
THIS_WRAPPER_VERSION=0.11
SUPPORTED_RUNTIME="docker podman"
DEFAULT_OUTPUT_DIR="$HOME/tmp"

# Initialize variables for wrapper arguments
CONFIG_FILE=""
AUTH_KEY=""
TEST_RELEASE=""
REPORT_DIR=""
# Array to hold arguments intended for the gcpdiag command
declare -a gcpdiag_args=()

# Parse arguments, separating wrapper flags from gcpdiag flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    --config=*)
      CONFIG_FILE="${1#*=}"
      gcpdiag_args+=("$1")
      shift # consume argument
      ;;
    --config)
      CONFIG_FILE="$2"
       gcpdiag_args+=("$1" "$2")
      shift 2 # consume flag
      ;;
    --auth-key=*)
      AUTH_KEY="${1#*=}"
      gcpdiag_args+=("$1")
      shift # consume argument
      ;;
    --auth-key)
      AUTH_KEY="$2"
      gcpdiag_args+=("$1" "$2")
      shift 2 # consume flag
      ;;
    --test-release=*)
      TEST_RELEASE="${1#*=}"
      shift # consume argument
      ;;
    --test-release)
       TEST_RELEASE="$2"
       shift 2 # consume flag
      ;;
    --report-dir=*)
      REPORT_DIR="${1#*=}"
      gcpdiag_args+=("$1")
      shift # consume argument
      ;;
    --report-dir)
      REPORT_DIR="$2"
      gcpdiag_args+=("$1" "$2")
      shift 2 # consume flag
      ;;
    *)
      # Assume anything else is an argument for gcpdiag
      gcpdiag_args+=("$1")
      shift # consume argument
      ;;
  esac
done

eval $(curl -sf https://storage.googleapis.com/gcpdiag-dist/release-version|grep -Ei '^\w*=[0-9a-z/\._-]*$')

# Modify image and tag if --test-release was used
if [[ "$TEST_RELEASE" == "staging" ]]; then
  echo "test-release specified: $TEST_RELEASE"
  # Using bash parameter expansion for potentially safer version increment
  if [[ "$DOCKER_IMAGE_VERSION" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
      major="${BASH_REMATCH[1]}"
      minor="${BASH_REMATCH[2]}"
      DOCKER_IMAGE_VERSION="${major}.$((minor + 1))-test"
  else
      echo "Warning: Could not parse DOCKER_IMAGE_VERSION ($DOCKER_IMAGE_VERSION) for incrementing."
      # Fallback or alternative logic might be needed here
      DOCKER_IMAGE_VERSION+="-test" # Simple append as fallback
  fi
  # Using bash parameter expansion for safer replacement
  DOCKER_IMAGE="${DOCKER_IMAGE/release/staging}"
  echo "DOCKER_IMAGE_VERSION: $DOCKER_IMAGE_VERSION"
  echo "DOCKER_IMAGE: $DOCKER_IMAGE"
fi

# Test whether 1st arg is greater than or equal to the 2nd, when compared as version numbers (bash-only)
version_ge () {
  # Note: implementation is rather crude and will treat missing numbers as `0`
  # so e.g. "1" and "1.0.0" compare equal; even worse, "..1" is accepted and
  # less than "0.0.2", and the empty string is equal to "0.0"
  local -a V1=(${1//./ })
  local -a V2=(${2//./ })
  if (( ${#V1[@]} > ${#V2[@]} )); then
    local -i len=${#V1[@]}
  else
    local -i len=${#V2[@]}
  fi
  for i in $(seq 0 ${len}); do
    if (( "${V1[$i]:-0}" < "${V2[$i]:-0}")); then
      return 1  # V1[i] < V2[i]
    fi
  done
  return 0  # V1 >= V2
}

# Test whether 1st arg (file) was provided and exists, then prepare mount path
# that will be used inside container with the same path if absolute path was used
# or inside root folder if relative path was used.
handle_mount_path () {
  local FILE="$1"
  local MOUNT=""
  if [ -n "$FILE" ]; then
    if [ -f "$FILE" ]; then
      if [[ "$FILE" = /* ]]; then
        # absolute path shall be mounted as is
        MOUNT="-v $FILE:$FILE"
      else
        # local path need to be mounted inside root folder
        MOUNT="-v $PWD/$FILE:/$FILE"
      fi
      echo "$MOUNT"
    else
      return 1
    fi
  fi
  return 0
}

# Test whether 1st arg (abs path to mount) was provided and exists, then prepare mount path
# If no custom mount point was provided, create and mount the DEFAULT_OUTPUT_DIR
# that will be used inside container with the same path
handle_mount_dir() {
  local DIR_TO_MOUNT="$1"
  local MOUNT=""

  if [ -z "$DIR_TO_MOUNT" ]; then
    DIR_TO_MOUNT="$DEFAULT_OUTPUT_DIR"

    if [ -z "$DIR_TO_MOUNT" ]; then
      # Return an error code if DIR_TO_MOUNT is empty or does not exist
      return 1
    else
      mkdir -p "$DIR_TO_MOUNT"
    fi
  elif [ ! -d "$DIR_TO_MOUNT" ] && [[ "$DIR_TO_MOUNT" = /* ]]; then
    # Create the directory if it doesn't exist and an absolute path is provided
    mkdir -p "$DIR_TO_MOUNT"
  fi

  # If it's a directory, mount the entire directory
  [ -d "$DIR_TO_MOUNT" ] && MOUNT="-v $DIR_TO_MOUNT:$DIR_TO_MOUNT"
  echo "$MOUNT"
  return 0
}

# Check this script version and compare with the minimum required version
# defined in the release-version file. This allows us to force an upgrade
# of the wrapper script.
if ! version_ge "$THIS_WRAPPER_VERSION" "$WRAPPER_VERSION"; then
  echo
  echo "## ERROR:"
  echo "## This gcpdiag wrapper script is obsolete (version $THIS_WRAPPER_VERSION, minimum required: $WRAPPER_VERSION)."
  echo "## Please update the wrapper script to the latest version as follows:"
  echo
  echo "curl https://gcpdiag.dev/gcpdiag.sh >gcpdiag"
  echo "chmod +x gcpdiag"
  echo
  exit 1
fi

[ -t 0 ] && USE_TTY="-it" || USE_TTY=""

# Ensure necessary host directories exist with correct ownership
mkdir -p "$HOME/.cache/gcpdiag" \
         "$HOME/.cache/gcpdiag-dockerized" \
         "$HOME/.config/gcloud"

# Set RUNTIME based on available container runtime cmd
RUNTIME="" # Initialize RUNTIME
for r in $SUPPORTED_RUNTIME; do
  if command -v "$r" >/dev/null; then
    RUNTIME="$r"
    break
  fi
done

if [ -z "$RUNTIME" ]; then
  echo >&2 "ERROR: No container runtime found - supported: $SUPPORTED_RUNTIME"
  exit 1
fi

# Configure Podman if used
if [ "$RUNTIME" = podman ]; then
  export PODMAN_USERNS=keep-id
fi

# Prepare config file mount
CONFIG_MOUNT=""
if [ -n "$CONFIG_FILE" ]; then
    if ! CONFIG_MOUNT=$(handle_mount_path "$CONFIG_FILE"); then
        echo >&2 # Print errors to stderr
        echo >&2 "## ERROR:"
        echo >&2 "## Configuration file: '$CONFIG_FILE' does not exist or is not a regular file!"
        echo >&2
        exit 1
    fi
fi

# Prepare auth key mount
AUTH_KEY_MOUNT=""
if [ -n "$AUTH_KEY" ]; then
    if ! AUTH_KEY_MOUNT=$(handle_mount_path "$AUTH_KEY"); then
        echo >&2 # Print errors to stderr
        echo >&2 "## ERROR:"
        echo >&2 "## Authentication key file: '$AUTH_KEY' does not exist or is not a regular file!"
        echo >&2
        exit 1
    fi
fi

# Execute the container
if ! REPORT_DIR_MOUNT=$(handle_mount_dir "$REPORT_DIR"); then
    echo
    echo "## ERROR:"
    echo "## Error creating report dir: $REPORT_DIR"
    echo
    exit 1
fi

# shellcheck disable=SC2086
exec "$RUNTIME" run $USE_TTY \
  --rm \
  -u "$(id -u):$(id -g)" \
  -e "USER=$(id -n -u)" \
  -e "GROUP=$(id -n -g)" \
  -e "SHELL=/bin/bash" \
  -e HOME -e LANG -e GOOGLE_AUTH_TOKEN -e CLOUD_SHELL \
  -v "$HOME/.cache/gcpdiag-dockerized:$HOME/.cache/gcpdiag" \
  -v "$HOME/.config/gcloud:$HOME/.config/gcloud" \
  $CONFIG_MOUNT \
  $AUTH_KEY_MOUNT \
  $REPORT_DIR_MOUNT \
  "$DOCKER_IMAGE:$DOCKER_IMAGE_VERSION" /opt/gcpdiag/bin/gcpdiag "${gcpdiag_args[@]}"
