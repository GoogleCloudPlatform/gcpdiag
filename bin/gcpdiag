#!/usr/bin/env python3

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""gcpdiag main script."""

# pylint: disable=invalid-name

import sys

from gcpdiag import config
from gcpdiag.lint import command as lint_command
from gcpdiag.runbook import command as runbook_command
from gcpdiag.search import command as search_command


def main(argv):
  # A very simple command-line parser to determine what subcommand is called.
  # Proper argument parsing will be done in the subcommands.

  # make sure we always output UTF-8, even if the terminal falls back to ascii
  if sys.version_info >= (3, 7):
    sys.stdout.reconfigure(encoding='utf-8')

  if len(argv) == 1 or argv[1] == '--help' or argv[1] == 'help':
    print_help()
  elif argv[1] == 'version' or argv[1] == '--version':
    print(f'gcpdiag {config.VERSION}\nCopyright 2021 Google LLC')
  elif argv[1] == 'lint':
    # Replace argv[0:1] with only argv[0] so that argparse works correctly.
    sys.argv.pop(0)
    sys.argv[0] = 'gcpdiag lint'
    try:
      lint_command.run(argv)
    except KeyboardInterrupt:
      print(
          '\n[WARNING] KeyboardInterrupt: Application was interrupted (terminated)',
          file=sys.stderr)
      sys.exit(1)
  elif argv[1] == 'runbook':
    # Replace argv[0:1] with only argv[0] so that argparse works correctly.
    sys.argv.pop(0)
    sys.argv[0] = 'gcpdiag runbook'
    try:
      runbook_command.run(argv)
    except KeyboardInterrupt:
      print(
          '\n[WARNING] KeyboardInterrupt: Application was interrupted (terminated)',
          file=sys.stderr)
      sys.exit(1)
  elif argv[1] == 'search':
    # Replace argv[0:1] with only argv[0] so that argparse works correctly.
    sys.argv.pop(0)
    sys.argv[0] = 'gcpdiag search'
    try:
      search_command.run(argv)
    except KeyboardInterrupt:
      print(
          '\n[WARNING] KeyboardInterrupt: Application was interrupted (terminated)',
          file=sys.stderr)
      sys.exit(1)
  else:
    print(f'ERROR: unknown command {argv[1]}. Use --help for help.',
          file=sys.stderr)
    sys.exit(1)


def print_help():
  print("""gcpdiag ðŸ©º - Diagnostics for Google Cloud Platform

Usage:
        gcpdiag COMMAND [OPTIONS]

Commands:
        help     Print this help text.
        lint     Run diagnostics on GCP projects.
        runbook  Run diagnostics tree to deep dive into GCP issue.
        search   Find gcpdiag rules related to search terms.
        version  Print gcpdiag version.

See: gcpdiag COMMAND --help for command-specific usage.""")


if __name__ == '__main__':
  main(sys.argv)
